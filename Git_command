Установка и настройка
# Ubuntu
sudo apt update
sudo apt install git-all
git --version
# Ваша версия может отличаться, но важно, чтобы она была не ниже 2.23.0
sudo apt install software-properties-common
sudo add-apt-repository ppa:git-core/ppa
sudo apt update
sudo apt install git
# Выполняется из любой директории
git config --global user.name "<имя фамилия>"
git config --global user.email "<ваш емейл>"
# Команда git init создает репозиторий — директорию .git, которая содержит все необходимые для работы git файлы.
git init
# С помощью команды git status можно посмотреть статус репозитория:
git status

# Первым шагом выполняется команда подготовки файлов git add <путь до файла> Для каждого нового или измененного файла
git add README.md
# Файл README.md теперь находится в состоянии "подготовлен к коммиту" или, другими словами, файлы попадают в индекс. Под коммитом понимается окончательное добавление в репозиторий. Вот, как он выполняется:
git commit -m 'add README.md'

Клонирование
Делается это с помощью команды git clone. Полную команду для клонирования можно получить на странице репозитория. Для этого нажмите большую кнопку Code, и скопируйте содержимое

Получение изменений с Github
git pull --rebase, скачивает из внешнего репозитория новые коммиты и добавляет их в локальный репозиторий

Рабочая дериктория
git restore <file> удаляет изменения, если они не были добавлены в индекс
git rm <file> # равносильно rm + git add

Анализ зделанных изменений
git diff показывает разницу между тем, что было и что стало
Сама команда не просто выводит на экран разницу между файлами, но и запускает пейджер — специальную программу, которая позволяет перемещаться по выводу и искать внутри него нужные данные. Для перемещения вниз по дифу нужно нажать f, для перемещения наверх — b или u. Для выхода из режима просмотра нажмите q.
git diff --staged Выведет все изменения сделанные в рабочей директории которые были добавлены в индекс

Анализ истории изменений (коммитов)
git log показывает список всех выполненных коммитов, отсортированных по дате добавления (сверху самые последние)
git log -p # Тут все коммиты с полным дифом
git show 5120bea3 # С помощью хеша можно посмотреть все изменения, сделанные в рамках одного коммита
git blame <путь до файла или file> выводит файл и рядом с каждой строкой показывает того, кто её менял и в каком коммите
git grep ищет совпадение с указанной строкой во всех файлах проекта
# Флаг i позволяет искать без учета регистра
git grep -i hexlet
# Поиск в конкретном коммите
git grep Hexlet 5120bea3
# Поиск по всей истории
# rev-list возвращает список хешей коммитов
git grep hexlet $(git rev-list --all)

Отмена изменений в рабочей дериктории
Неотслеживаемые файлы
# Выполняем очистку -f – force, -d – directory
git clean -fd
Изменённые файлы в рабочей директории
git restore <file>
Изменения, подготовленные к коммиту
git restore --staged <file>
    Теперь, если нужно, можно выполнить git restore и окончательно отменить изменения в выбранных файлах

Отмена коммитов
git revert aa600a43cb164408e4ad87d216bc679d097f1a6c
# Этой команде нужен идентификатор коммита
# Это коммит, которым мы удалили файл PEOPLE.md
# После этой команды откроется редактор, ожидающий ввода описания коммита
# Обычно сообщение revert не меняют, поэтому достаточно просто закрыть редактор
